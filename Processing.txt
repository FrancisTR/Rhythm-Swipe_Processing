/*/
Game Project
Rhythm Swipe
Processing Edition

Legends:
- !!!: Variable restart in Finish or Failed function
/*/
import java.util.*;
import processing.sound.*;



//CLASSES GLOBAL VARIABLES
public static int rpos;
public static int rpos2;
public static int random;



//------------MainMenu--------------
PImage BackgroundImage; //Main menu background
//Cube NPCS; //???
int rectWidthMainMenu = 30;
int rectHeightMainMenu = 500;
int xMainMenu = rectWidthMainMenu; //!!!
int yMainMenu = 575;
SoundFile MainMenuTheme;
boolean MainMenuThemeSwitch = false;
//----------------------------------

//---------------Creating the Board-------------------
int boardSize = 600; //How big the board is
int tileSize = boardSize/10; //The grid
//----------------------------------------------------



//-----------------The Character----------------------
int moveWidth = 0; //!!!
int moveHeight = 0; //!!!
Player player; //The player !!!
PImage[] playerAnimation; //List of images to use for the character "REMOVED "= []"
int playerCounter = 0; //!!!
int backgroundColor = 210; //The background color of the board. !!!
//----------------------------------------------------



//------------------Enemies (Work in progress)-------------------------------
//"REMOVED = []"
Enemy[] enemy; //!!!
Enemy[] enemy2; //!!!

//"REMOVED = []"
PImage[] guard; //Images of the guard

boolean flipBooleanX = false; //!!!
int enemyMoveMaxX = 240; //Can move up to 240 in the X position
int enemyMovingX = 0; //Incrment 60 for moving; !!!
boolean enemyMoveMaxLockX = false; //Lock the increment and decrement back to its original position !!!
//Use these variables to check collision with a player

boolean flipBooleanY = false; //!!!
int enemyMoveMaxY = 240; //Can move up to 240 in the Y
int enemyMovingY = 0; //Incrment 60 for moving; !!!
boolean enemyMoveMaxLockY = false; //Lock the increment and decrement back to its original position !!!
//---------------------------------------------------------------------------



//-------------------------------The bar that detects the beat in game. (Work in progress)-------------------
int pressByBeat = 500;
//cubeDetector and cubeBeat has been moved
int rectWidth = 30;
int rectHeight = 500;
int x2 = rectWidth; //!!!
int y2 = 575;
//-----------------------------------------------------------------------------------------------------------



//--------------------Timer for Master Mode---------------------------
//Timer used to see how long the player takes to complete a level.
//Will be used in the Master Mode!!!!!
int timer = 0; //!!!
int worldRecord = -1; //-1 is null
boolean masterModeTimer = false; //!!!
//--------------------------------------------------------------------



//------------------------Items in game-------------------------------
//REMOVED = []
Coins[] coins; //!!!
PImage[] diamonds; //Our "coins" images
Block[] blocks; //!!!

int points = 0; //!!!
int i = 0; //!!!
int level = -1; //Can change any level for testing purposes
//--------------------------------------------------------------------


//------------------Green block (Finish line)-------------------------
int[] finishLine; //!!! "REMOVED "= []"
FinishBlock endBlock; //!!!
//--------------------------------------------------------------------




//-----------------------Music for all 4 levels!----------------------
SoundFile easySound;
SoundFile normalSound;
SoundFile hardSound;
SoundFile masterSound;

Amplitude amplitude = new Amplitude(this);
ArrayList<Float> volHistory = new ArrayList<>(); //!!! in main menu "REMOVED " = []"


//----------------------Music Related------------------------------

Cube cubeDetector = new Cube();
Cube cubeBeat = new Cube();
//-----------------------------------------------------------------
//--------------------------------------------------------------------






//--------------------------------------------------------------PRELOAD----------------------------------------------------------------------------
//PRELOAD Removed!





//--------------------------------------------------------------------SETUP---------------------------------------------------------------------------------
//Creation of the Canvas, the buttons, and the sounds
void setup() {
    size(600, 600);
    rectMode(CENTER);
    //div.position(100, 100);
    //div.center("horizontal");
    
    
    
    //TASK: WORK ON THE MUSIC TO DISPLAY CORRECTLY
    /*/Sounds//
    easySound = new SoundFile(this, "/sounds/A_Punch_Up_at_a_Wedding(Easy).mp3");
    //*/
    /*/Sounds//
    normalSound = new SoundFile(this, "/sounds/Radiohead_There_There(Medium).mp3");
    //*/
    /*/Sounds//
    hardSound = new SoundFile(this, "/sounds/Where_I_End_and_You_Begin(Hard).mp3");
    //*/
    /*/Sounds//
    masterSound = new SoundFile(this, "/sounds/Super_Mario_Galaxy.mp3");
    //*/

    /*/Sounds//
    MainMenuTheme = new SoundFile(this, "/sounds/Super_Mario_Galaxy_2.mp3");
    //*/



    //Thief Images
    for (int i = 0; i < 12; i++){
        playerAnimation[i] = loadImage("asset/thief/Thief"+i+".png");
        //console.log("Sprite Thief loaded");
    }

    //Guard Images
    for (int i = 0; i < 16; i++){
        if (i >= 12){
            guard[i] = loadImage("asset/guard/Guard"+i+".gif");
        }else{
            guard[i] = loadImage("asset/guard/Guard"+i+".png");
        }
        //console.log("Sprite Guard loaded");
    }

    //Diamond Images
    for (int i = 0; i < 4; i++){
        diamonds[i] = loadImage("asset/gems/gem"+i+".png");
        //console.log("Items loaded");
    }

    BackgroundImage = loadImage("asset/MainMenu.gif");

    

//TASK: CREATE THE BUTTONS
    /*/PROBLEM 1---------------------------------------------------------------------------------
    //StartGame
    
    StartGameButton = createButton("Start");
    StartGameButton.style("color", "blueviolet");
    StartGameButton.style("font-size", "large");
    StartGameButton.size(200, 75);
    StartGameButton.position(250, 300);
    StartGameButton.mousePressed(mainMenu); //Goes to Main Menu
    StartGameButton.center("horizontal");


    //-------------Back button-----------
    buttonBack = createButton("Back");
    buttonBack.style("color", "black");
    buttonBack.style("font-size", "large");
    buttonBack.size(200, 75);
    buttonBack.position(250, 510);
    buttonBack.mousePressed(mainMenu); //Goes to Main Menu
    buttonBack.center("horizontal");
    //-----------------------------------

    //-----------Easy Button-------------
    button = createButton("Easy");
    button.style("color", "green");
    button.style("font-size", "large");
    button.size(200, 75);
    button.position(250, 250);
    button.mousePressed(easyIntermission); //Goes to Intermission
    button.center("horizontal");

    buttonStart = createButton("Start");
    buttonStart.style("color", "green");
    buttonStart.style("font-size", "large");
    buttonStart.size(200, 75);
    buttonStart.position(250, 425);
    buttonStart.mousePressed(easyLevel); //Play Easy Mode
    buttonStart.center("horizontal");
    //-----------------------------------

    //-----------Normal Button-----------
    button2 = createButton("Normal");
    button2.style("color", "orange");
    button2.style("font-size", "large");
    button2.size(200, 75);
    button2.position(250, 350);
    button2.mousePressed(normalIntermission); //Goes to Intermission
    button2.center("horizontal");

    button2Start = createButton("Start");
    button2Start.style("color", "orange");
    button2Start.style("font-size", "large");
    button2Start.size(200, 75);
    button2Start.position(250, 425);
    button2Start.mousePressed(normalLevel); //Play Normal Mode
    button2Start.center("horizontal");
    //-----------------------------------

    //------------Hard button------------
    button3 = createButton("Hard");
    button3.style("color", "red");
    button3.style("font-size", "large");
    button3.size(200, 75);
    button3.position(250, 450);
    button3.mousePressed(hardIntermission); //Goes to Intermission
    button3.center("horizontal");

    button3Start = createButton("Start");
    button3Start.style("color", "red");
    button3Start.style("font-size", "large");
    button3Start.size(200, 75);
    button3Start.position(250, 425);
    button3Start.mousePressed(hardLevel); //Play Hard Mode
    button3Start.center("horizontal");
    //------------------------------------

    //-----------Master button (Used to see the world record)----------
    button4 = createButton("Master");
    button4.style("color", "darkred");
    button4.style("font-size", "large");
    button4.size(200, 75);
    button4.position(250, 550);
    button4.mousePressed(masterIntermission); //Goes to Intermission
    button4.center("horizontal");

    button4Start = createButton("Start");
    button4Start.style("color", "darkred");
    button4Start.style("font-size", "large");
    button4Start.size(200, 75);
    button4Start.position(250, 425);
    button4Start.mousePressed(masterLevel); //Play Master Mode
    button4Start.center("horizontal");
    //-----------------------------------------------------------------


    //---------Return button (For Finish and Fail level)---------------
    buttonW = createButton("Return");
    buttonW.style("color", "black");
    buttonW.style("font-size", "large");
    buttonW.size(200, 75);
    buttonW.position(250, 550);
    buttonW.mousePressed(mainMenu); //Main menu
    buttonW.center("horizontal");
    buttonW.hide();
    //*/
}


//----------------------------------------------------------------------------------------------------------------------------------------------------------









//--------------------------------------------------------------------DRAW----------------------------------------------------------------------------------
void draw(){

    //Switch through rooms based on the "level" variable. Functionality for buttons mainly
//PROBLEM 2---------------------------------------------------------------------------

//EDIT WE CHANGED THE CASES BTW 

    switch(level){
        case 0: //CLICK TO START
            //Start Game (CHANGE BUTTONS)
            //buttonHide();
            //buttonBack.hide();
            //StartGameButton.show();
            print();

            break;
        //---------------Main Menu------------------
        case 1:
            //buttonBack.hide();
            //StartGameButton.hide();
            //buttonW.hide();
            //buttonStart.hide();
            //button2Start.hide();
            //button3Start.hide();
            //button4Start.hide();
            //*//Sounds
            easySound.stop();
            normalSound.stop();
            hardSound.stop();
            //*/
            masterSound.stop();
            if (MainMenuThemeSwitch == false && !MainMenuTheme.isPlaying()){
                MainMenuTheme.play();
                MainMenuTheme.loop();
                MainMenuThemeSwitch = true;
            }
            background(0,0,0,255); //black
            image(BackgroundImage, 0, 0, boardSize, boardSize);
            showNPC(); //A nice seeing of a cop running to the robber
            fill(255, 202, 48);
            textSize(50);
            text("Rhythm Swipe", 144, 100);
            //buttonShow();
            break;
        //------------------------------------------



        //--------------Easy Mode-------------------
        case -2: //Easy Mode Intermission
            MainMenuTheme.stop();
            MainMenuThemeSwitch = false;
            background(209); //gray
            //buttonHide();
            
            //Show the Start and Back button
            //buttonBack.show();
            //buttonStart.show();
            
            fill(255);
            textSize(25);
            text("Difficulty: Easy", 25, 100);
            textSize(20);
            text("Music: A Punch Up at a Wedding", 25, 150);
            text("By Radiohead", 25, 200);
            visualAudio(); //Show the audio visually
            break;
        case 2: //Easy Mode Level
            //buttonHide();
            if (player != null){
                player = new Player(1,6);
                //*/Sounds/
                easySound.play();
                //*/
            }
            background(backgroundColor);
            level1();
            board();
            level1Beat();
            finished();
            break;
        //-----------------------------------------



        //-------------Normal Mode-----------------
        case -3: //Normal Mode Intermission
            MainMenuTheme.stop();
            MainMenuThemeSwitch = false;
            background(209);
            //buttonHide();
            
            //buttonBack.show();
            //button2Start.show();
            
            fill(255);
            textSize(25);
            text("Difficulty: Normal", 25, 100);
            textSize(20);
            text("Music: There There", 25, 150);
            text("By Radiohead", 25, 200);
            visualAudio();
            break;
        case 3: //Normal Mode Level
            //buttonHide();
            if (player != null){
                player = new Player(2,2);
                playerCounter = 1;
                player.turn(90);
                //*/Sounds/
                normalSound.play();
                //*/
            }
            background(backgroundColor);
            level2();
            board();
            level2Beat();
            finished();
            break;
        //-----------------------------------------





        //---------------Hard Mode-----------------
        case -4: //Hard Mode Intermission
            MainMenuTheme.stop();
            MainMenuThemeSwitch = false;
            background(209);
            //buttonHide();
            
            //buttonBack.show();
            //button3Start.show();
            
            fill(255);
            textSize(25);
            text("Difficulty: Hard", 25, 100);
            textSize(20);
            text("Music: Where I End and You Begin", 25, 150);
            text("By Radiohead", 25, 200);
            visualAudio();
            break;
        case 4: //Hard Mode Level
            //buttonHide();
            if (player != null){
                player = new Player(6, 9);
                playerCounter = 3;
                player.turn(-90);
                //*/Sounds/
                hardSound.play();
                //*/
            }
            background(backgroundColor);
            level3();
            board();
            level3Beat();
            finished();
            break;
         //----------------------------------------


        //--------------Master Mode-------------------
        case -5: //Master Mode Intermssion
            MainMenuTheme.stop();
            MainMenuThemeSwitch = false;
            background(209);
            //buttonHide();
            //buttonBack.show();
            //button4Start.show();
            fill(255);
            textSize(25);
            text("Difficulty: Master", 25, 100);
            textSize(20);
            text("Music: Super Mario Galaxy: Staff Roll 8 Bit Remix", 25, 150);
            text("By Vahkiti", 25, 200);
            if (worldRecord == -1){
                text("Creative Coding Current Record Time: None", 20, 550);
            }else{
                text("Creative Coding Current Record Time: "+worldRecord+"s", 20, 550);
            }
            visualAudio();
            break;
        case 5: //Master Mode Level
            //buttonHide();
            if (player != null){
                player = new Player(1, 6);
                //*/Sounds/
                masterSound.play();
                //*/
            }
            background(backgroundColor);
            level4();
            board();
            level4Beat();
            finished(); //Might change
            break;
        //-------------------------------------------
        
//Either win or lose
        case 6: //Mission accomplished with Stats
            background(0, 255, 0, 255); //green
            fill(255, 202, 48, 255); //gold
            textSize(50);
            text("Mission Success", boardSize/5, 100);
            //Master code
            if (masterModeTimer == true){
                if (worldRecord == -1 || worldRecord > timer){
                    text("Finish Time: "+timer+"s", boardSize/5, 200);
                    text("New World Record!", boardSize/6.5, 300);
                }else{
                    text("Finish Time: "+timer+"s", boardSize/5, 200);
                    textSize(25);
                    text("Creative Coding Exhibition World Record: "+worldRecord+"s", boardSize/12, 300);
                }
            }
            //----
            //buttonW.show();
            //buttonHide();
            break;
        case 7: //Mission Failed
            background(255, 0, 0, 255); //red
            fill(0);
            textSize(50);
            text("Mission Failed", boardSize/4.3, 100);
            //buttonW.show();
            //buttonHide();
            failed();
            break;
        //------------------
        
        
        
//PROBLEM 2---------------------------------------------------------------------------
    }
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------










//--------------------------------------------------------------------Display the Music Beat Bar------------------------------------------------------------
void showNPC(){
    Cube NPCS = new Cube();
    NPCS.displayMainMenu();
}
//Beat based on the theme of the song
void level1Beat(){
    cubeBeat.displayLevel1();
}
//Level2
void level2Beat(){
    cubeBeat.displayLevel2();
}
//Level3
void level3Beat(){
    cubeBeat.displayLevel3();
}
//Levelmaster
void level4Beat(){
    cubeBeat.displayLevel4();
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------



//-------------------------------------------------------------------------FINISH OR FAILED LEVEL-------------------------------------------------------------------------------
//Finish the level or not, clear everything!
void finished(){
    if (round(moveWidth) == finishLine[0] && round(moveHeight) == finishLine[1] && coins.length == points){ //If it collides with the endBlock
        //console.log("Winner!");
        level = 4;


        //Clear everything when level complete
        player = null; //
        x2 = rectWidth; //
        i = 0; //
        finishLine = null; //[]
        coins = null; //[]
        blocks = null; //[]
        endBlock = null; //
        moveWidth = 0; //
        moveHeight = 0; //
        enemy = null; //[]
        enemy2 = null; //
        points = 0; //
        backgroundColor = 210; //
        //*/Sounds/
        easySound.stop();
        //*/
        //*/Sounds/
        normalSound.stop();
        //*/
        //*/Sounds/
        hardSound.stop();
        //*/
        //*/Sounds/
        masterSound.stop();
        //*/
        playerCounter = 0; //
        enemyMovingX = 0; //Incrment 60 for moving;
        enemyMoveMaxLockX = false; //Lock the increment and decrement back to its original position
        flipBooleanX = false; //

        enemyMovingY = 0; //Incrment 60 for moving;
        enemyMoveMaxLockY = false; //Lock the increment and decrement back to its original position
        flipBooleanY = false; //

    }
}
void failed(){
    //console.log("Winner!");
    //Clear everything when level complete
    player = null; //
    x2 = rectWidth; //
    i = 0; //
    finishLine = null; //[]
    coins = null; //[]
    blocks = null; //[]
    endBlock = null; //
    moveWidth = 0; //
    moveHeight = 0; //
    enemy = null; //[]
    enemy2 = null; //[]
    points = 0; //
    backgroundColor = 210; //
    //*/Sounds/
    easySound.stop();
    //*/
    //*/Sounds/
    normalSound.stop();
    //*/
    //*/Sounds/
    hardSound.stop();
    //*/
    //*/Sounds/
    masterSound.stop();
    //*/
    playerCounter = 0; //
    enemyMovingX = 0; //Incrment 60 for moving;
    enemyMoveMaxLockX = false; //Lock the increment and decrement back to its original position


    enemyMovingY = 0; //Incrment 60 for moving;
    enemyMoveMaxLockY = false; //Lock the increment and decrement back to its original position

    flipBooleanX = false; //
    flipBooleanY = false; //
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------



//--------------------------------------------------------------------LEVEL Intermission => Actual Level-------------------------------------------------------------------------------
//Transition to different levels. Used in a button

//-------------EASY-----------------
void easyLevel() {
    level = 2;
    //*/Sounds/
    easySound.stop();
    //*/
}
void easyIntermission(){
    level = -2;
    //buttonStart.show();
    //*/Sounds/
    easySound.play();
    easySound.loop();
    //*/
}
//----------------------------------

//-------------NORMAL---------------
void normalLevel() {
    level = 3;
    //*/Sounds/
    normalSound.stop();
    //*/
}
void normalIntermission(){
    level = -3;
    //button2Start.show();
    //*/Sounds/
    normalSound.play();
    normalSound.loop();
    //*/
}
//----------------------------------

//---------------HARD---------------
void hardLevel() {
    level = 4;
    //*/Sounds/
    hardSound.stop();
    //*/
}
void hardIntermission(){
    level = -4;
    //button3Start.show();
    //*/Sounds/
    hardSound.play();
    hardSound.loop();
    //*/
}
//----------------------------------



//-------------MASTER---------------
void masterLevel() {
    level = 5;
    //*/Sounds/
    masterSound.stop();
    //*/
}
void masterIntermission(){
    level = -5;
    //button4Start.show();
    //*/Sounds/
    masterSound.play();
    masterSound.loop();
    //*/
}
//----------------------------------


//Show the audio throughout all Difficulty Levels
void visualAudio(){
    float vol = amplitude.analyze();
  
    volHistory.add(vol);
  
    //if(volHistory.size() > width*1) volHistory = splice(volHistory, 0,1); //width map (Change LATER)
  
    stroke(255);
    noFill();
    beginShape();
    for(int i=0; i<volHistory.size(); i++) {
        float y = map(volHistory.get(i), 0, 1, height/2, 0); //position map
        vertex(i, y);
    }
    endShape();
  
    stroke(255,0,0);
    line(volHistory.size(), 0, volHistory.size(), height);
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//----------------------------------------------------------------BUTTON HIDE AND SHOW--------------------------------------------------------------
void mainMenu(){
    volHistory = null; //Reset the visual for music []
    level = 0;
    //buttonW.hide();
    //buttonBack.hide();
    //Temporary for now
    if (masterModeTimer == true){
        if (worldRecord > timer || worldRecord == -1){
            worldRecord = timer;
        }
    }
    masterModeTimer = false;
    timer = 0;
    //-----------------
}

//----------Hide the Buttons-----------
/*
void buttonHide(){
    buttonBack.hide();

    //Easy
    button.hide();
    buttonStart.hide();
    
    //Normal
    button2.hide();
    button2Start.hide();

    //Hard
    button3.hide();
    button3Start.hide();

    //Master
    button4.hide();
    button4Start.hide();
}
*/

/*
//Win or Lose button RETURN
void buttonHideW(){
    buttonW.hide();
}
//------------------------------------

//Showing the buttons on screen
void buttonShow(){
    button.show();
    button2.show();
    button3.show();
    button4.show();
}
*/
//-------------------------------------------------------------------------------------------------------------------------------------





//---------------------------------------------------------LEVEL DESIGN-------------------------------------------------------------------

//Shows all the levels on screen when button is clicked!
void level1(){ //Done
    finishLine[0] = 540;
    finishLine[1] = 300;
    
    //randomCoinX = random([30, 90, 150, 210, 270, 330, 390, 450, 510, 570]);
    //randomCoinY = random([30, 90, 150, 210, 270, 330, 390, 450, 510, 570]);
    

    //coins display
    //I am not sure why the loop needs to be here
    //since it will not work if there is no loop here.

    //Best guess: It requires to update in a scope scene since
    //The player needs to collect the coins and the coins will position
    //else where.
    while(i != 1){
        coins[0] = new Coins(150, 210, random(0,3));
        coins[1] = new Coins(150, 330, random(0,3));
        coins[2] = new Coins(570, 270, random(0,3));
        i++;
    }

    //The blocks does not need a loop since it is in a static position
    //Points boarder (Coins)
    blocks[0] = new Block(30, 30);
    blocks[1] = new Block(90, 30);
    blocks[2] = new Block(150, 30);

    //Borders
    blocks[3] = new Block(570, 210);
    blocks[4] = new Block(90, 270);
    blocks[5] = new Block(150, 270);
    blocks[6] = new Block(210, 270);
    blocks[7] = new Block(270, 270);
    blocks[8] = new Block(330, 270);
    blocks[9] = new Block(390, 270);
    blocks[10] = new Block(450, 270);
    blocks[11] = new Block(510, 270);
    blocks[12] = new Block(510, 210);
    blocks[13] = new Block(510, 330);
    blocks[14] = new Block(90, 210);
    blocks[15] = new Block(90, 330);

    //The goal line
    endBlock = new FinishBlock(finishLine[0], finishLine[1]);
}



void level2(){ //Normal mode
    finishLine[0] = 540;
    finishLine[1] = 300;
    while (i != 1){
        //array = random([30, 90, 150, 210, 270, 330, 390, 450, 510, 570]);
        //array2 = random([30, 90, 150, 210, 270, 330, 390, 450, 510, 570]);
        coins[0] = new Coins(570, 450, random(0,3));
        coins[1] = new Coins(270, 270, random(0,3));
        coins[2] = new Coins(210, 30, random(0,3));
        i++;
    }


    //Enemies
    enemy[0] = new Enemy(30, 330);
    enemy[1] = new Enemy(270, 510);
    enemy[2] = new Enemy(90, 150);
    enemy[3] = new Enemy(330, 30);
    


    //Points boarder (Coins)
    blocks[0] = new Block(30, 30);
    blocks[1] = new Block(90, 30);
    blocks[2] = new Block(150, 30);


    //borders
    blocks[3] = new Block(150, 390);
    blocks[4] = new Block(150, 450);
    blocks[5] = new Block(150, 510);
    blocks[6] = new Block(30, 390);
    blocks[7] = new Block(30, 450);
    blocks[8] = new Block(30, 510);
    
    blocks[9] = new Block(30, 210);
    blocks[10] = new Block(90, 210);
    blocks[11] = new Block(150, 210);
    blocks[12] = new Block(210, 210);
    blocks[13] = new Block(270, 210);
    blocks[14] = new Block(330, 210);

    blocks[15] = new Block(330, 270);
    blocks[16] = new Block(330, 330);
    blocks[17] = new Block(330, 390);
    blocks[18] = new Block(330, 450);

    blocks[19] = new Block(390, 270);
    blocks[20] = new Block(390, 330);
    blocks[21] = new Block(390, 390);
    blocks[22] = new Block(390, 450);
    blocks[23] = new Block(390, 210);

    blocks[23] = new Block(30, 90);
    blocks[24] = new Block(90, 90);
    blocks[25] = new Block(150, 90);
    blocks[26] = new Block(210, 90);
    blocks[27] = new Block(270, 90);
    blocks[28] = new Block(330, 90);

    blocks[29] = new Block(390, 210);
    blocks[30] = new Block(390, 150);
    blocks[31] = new Block(390, 90);


    blocks[32] = new Block(510, 270);
    blocks[33] = new Block(510, 330);
    blocks[34] = new Block(510, 390);
    blocks[35] = new Block(510, 450);
    blocks[36] = new Block(510, 210);
    blocks[37] = new Block(510, 150);
    blocks[38] = new Block(510, 90);

    blocks[39] = new Block(570, 390);
    blocks[40] = new Block(30, 150);


    endBlock = new FinishBlock(finishLine[0], finishLine[1]);


}



void level3(){ // Hard Mode
    finishLine[0] = 300;
    finishLine[1] = 300;

    while(i != 1){
        coins[0] = new Coins(90, 90, random(0,3));
        coins[1] = new Coins(30, 450, random(0,3));
        coins[2] = new Coins(510, 90, random(0,3));
        coins[3] = new Coins(570, 450, random(0,3));
        coins[4] = new Coins(330, 510, random(0,3));
        i++;
    }
    //[30, 90, 150, 210, 270, 330, 390, 450, 510, 570]
    enemy[0] = new Enemy(270, 450);
    enemy[1] = new Enemy(30, 210);
    enemy[2] = new Enemy(330, 210);


    enemy2[0] = new Enemy(210, 210);
    enemy2[1] = new Enemy(450, 210);



    //Points boarder (Coins)
    blocks[0] = new Block(30, 30);
    blocks[1] = new Block(90, 30);
    blocks[2] = new Block(150, 30);

    blocks[3] = new Block(210, 30);
    blocks[4] = new Block(270, 30);
    blocks[5] = new Block(330, 30);
    blocks[6] = new Block(390, 30);
    blocks[7] = new Block(450, 30);
    blocks[8] = new Block(510, 30);
    blocks[9] = new Block(570, 30);

    blocks[10] = new Block(210, 90);
    blocks[11] = new Block(450, 90);

    blocks[12] = new Block(210, 150);
    blocks[13] = new Block(450, 150);

    blocks[14] = new Block(150, 150);
    blocks[15] = new Block(510, 150);

    blocks[16] = new Block(450, 510);
    blocks[17] = new Block(510, 510);
    blocks[18] = new Block(570, 510);

    blocks[19] = new Block(30, 510);
    blocks[20] = new Block(90, 510);
    blocks[21] = new Block(150, 510);
    blocks[22] = new Block(210, 510);

    //[30, 90, 150, 210, 270, 330, 390, 450, 510, 570]
    blocks[23] = new Block(150, 390);
    blocks[24] = new Block(150, 450);
    blocks[25] = new Block(90, 450);

    blocks[26] = new Block(510, 270);
    blocks[27] = new Block(510, 330);
    blocks[28] = new Block(510, 390);

    blocks[29] = new Block(30, 330);
    blocks[30] = new Block(150, 330);

    blocks[31] = new Block(270, 390);
    blocks[32] = new Block(390, 390);
    blocks[33] = new Block(270, 270);
    blocks[34] = new Block(390, 270);

    //The goal line
    endBlock = new FinishBlock(finishLine[0], finishLine[1]);


}


void level4(){ //MASTER MODE
    finishLine[0] = 540;
    finishLine[1] = 240;

    //[30, 90, 150, 210, 270, 330, 390, 450, 510, 570]
    while(i != 1){
        coins[0] = new Coins(210, 30, random(0,3));
        coins[1] = new Coins(30, 510, random(0,3));
        coins[2] = new Coins(570, 150, random(0,3));
        coins[3] = new Coins(570, 390, random(0,3));
        coins[4] = new Coins(270, 270, random(0,3));
        i++;
    }


    enemy[0] = new Enemy(30, 150);
    enemy[1] = new Enemy(210, 30);
    enemy[2] = new Enemy(210, 510);

    enemy2[0] = new Enemy(270, 150);
    enemy2[1] = new Enemy(510, 30);
    enemy2[2] = new Enemy(510, 270);











    //Points boarder (Coins)
    blocks[0] = new Block(30, 30);
    blocks[1] = new Block(90, 30);
    blocks[2] = new Block(150, 30);

    blocks[3] = new Block(30, 90);
    blocks[4] = new Block(90, 90);
    blocks[5] = new Block(150, 90);

    blocks[6] = new Block(270, 90); //Same value as 7
    blocks[7] = new Block(270, 90);
    blocks[8] = new Block(330, 90);

    blocks[9] = new Block(450, 90);

    blocks[10] = new Block(450, 450);
    blocks[11] = new Block(450, 150);
    blocks[12] = new Block(450, 210);
    blocks[13] = new Block(450, 270);
    blocks[14] = new Block(450, 330);
    blocks[15] = new Block(450, 390);


    blocks[16] = new Block(30, 450);
    blocks[17] = new Block(90, 450);
    blocks[18] = new Block(150, 450);
    blocks[19] = new Block(150, 450);
    blocks[20] = new Block(270, 450);
    blocks[21] = new Block(330, 450);

//[30, 90, 150, 210, 270, 330, 390, 450, 510, 570]
    blocks[22] = new Block(570, 450);

    blocks[23] = new Block(570, 210);

    blocks[24] = new Block(570, 90);
    
    blocks[25] = new Block(570, 330);


    blocks[26] = new Block(330, 330);
    blocks[27] = new Block(210, 210);
    blocks[28] = new Block(210, 330);
    blocks[29] = new Block(330, 210);

    blocks[30] = new Block(390, 270);
    blocks[31] = new Block(90, 270);

    blocks[32] = new Block(90, 210);
    blocks[33] = new Block(90, 330);

    //The goal line
    endBlock = new FinishBlock(finishLine[0], finishLine[1]);

    //We time the player
    masterModeTimer = true;
    if (frameCount % 60 == 0 && timer >= 0) {
        timer++;
    }

}


//The board itself. Is used for all levels
void board(){
    for (int x = 0; x < width; x += width / 10) {
    for (int y = 0; y < height; y += height / 10) {
      stroke(0);
      strokeWeight(1.5);
      line(x, 0, x, height);
            stroke(110);
            strokeWeight(1.5);
            line(x + 1.5, 0, x + 1.5, height);

            stroke(0);
      strokeWeight(1.5);
      line(0, y, width, y);
            stroke(110);
            strokeWeight(1.5);
            line(0, y +1.5, width, y +1.5);

    }
  }
    //coins display
    for (int i = 0; i < coins.length; i++){
        coins[i].display();
    }
    //Block display
    for (int i = 0; i < blocks.length; i++){
        blocks[i].display();
    }
    //EnemyX display
    for (int i = 0; i < enemy.length; i++){
       enemy[i].displayX();
    }
    //EnemyY display
    for (int i = 0; i < enemy2.length; i++){
        enemy2[i].displayY();
    }
    player.display();
    endBlock.finishDisplay();

    stroke(51);
    fill(209);
    strokeWeight(2);
    rect(0, 0, 180 ,60);
    fill(255, 0, 0);
    textSize(35);
    text(" Jewels: "+points, 0, 45);


    cubeDetector.displayDetector();
 
}   




//Moving correlates to Canvas size. Ex: If Canvas is 600x600, then the
//block moves 60. 500x500 is 50, etc.
void keyPressed() {

    if (keyCode == LEFT) {
        // moveWidth -= tileSize;
        playerCounter+= 1;
        player.turn(90);
    } else if (keyCode == RIGHT) {
        // moveWidth += tileSize;
        playerCounter-= 1;
        player.turn(-90);
    } else if (keyCode == 49){ //Space bar
        player.moveForward();
        pressByBeat = 0;
    }
}
//---------------------------------------------------------LEVEL DESIGN-------------------------------------------------------------------





//*/-------------------------------PROBELM 3temporary for player ------------------------
PVector onCircle(PVector coords, float r, int deg){
    double t = degToRad(deg);
    return new PVector((int)(r*Math.cos(t)+coords.x),(int)(r*Math.sin(t)+coords.y));
}
double degToRad(int deg){//Size of the triangle in height
    return -deg*(Math.PI/180);
}
//Making the triangle of the player
PVector[] makeTriangle(PVector center, float radius, int deg){
    PVector p1 = onCircle(center, radius, deg);
    PVector p2 = onCircle(center, radius, deg+120);
    PVector p3 = onCircle(center, radius, deg-120);
    //return {x1:p1.x, y1:p1.y, x2:p2.x, y2:p2.y, x3:p3.x, y3:p3.y} ---COMEBACK
    PVector[] result = new PVector[3];
    result[0] = p1;
    result[1] = p2;
    result[3] = p3;
    return result;
    
}
//-----------------------------------PROBLEM 3---------------------------------------------



//1,1 is the bottom left tile
//Test for out of bounds
PVector tileAt(int x, int y){
    //int tileMax = boardSize/tileSize;
 
    int tileX = x*tileSize;
    int tileY = y*tileSize;
    int xCoords = tileX-tileSize;
    int yCoords = boardSize-tileY;
    //return {x: xCoords, y: yCoords} --COMEBACK
    return new PVector(xCoords, yCoords);
    
}

//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES
//------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES------------------CLASSES


//------------------------------------------------------Vector Class--------------------------------------------

//------------------------------------------------------Player Class--------------------------------------------
class Player{
    int facing;
    PVector xy;
    PVector center;
    float x;
    float y;
    int playerCounter;
    float prevX;
    float prevY;
  
    Player(int startPosX, int startPosY){
        this.facing = 0;
        this.xy = tileAt(startPosX,startPosY);
        this.x = this.xy.x;
        this.y = this.xy.y;
        //this.center = {x: this.x+tileSize/2, y:this.y+tileSize/2}; --COMEBACK
        this.center = new PVector(this.x+tileSize/2, this.y+tileSize/2);
        this.prevX = this.x;
        this.prevY = this.y;
    }

    //Show the character
    void display(){
        //X and Y and width, and height
        //let test = makeTriangle(this.center, tileSize/2-(tileSize*0.15), this.facing);
        //fill("blueviolet");
        //triangle(test.x1, test.y1, test.x2, test.y2, test.x3, test.y3);
        this.showImage(playerCounter); //Shows the character image
        //fill(255,0,0,255); //red
        //let test2 = makeTriangle({x:test.x1, y:test.y1}, tileSize/4-(tileSize*0.10), this.facing);
        //triangle(test2.x1, test2.y1, test2.x2, test2.y2, test2.x3, test2.y3);
    }


    //WORK IN PROGRESS
    void showImage(int counter){
        //There are 0, 3, 6
        this.playerCounter = counter;
        if (counter == -1){
            counter = 3;
            playerCounter = counter;
            this.playerCounter = counter;
        }else if(counter == 4){
            counter = 0;
            playerCounter = counter;
            this.playerCounter = counter;
        }
        if(counter == 0){ //Right side
            image(playerAnimation[6], round(this.x) + 20, round(this.y) - 20, 0, 0);
        }
        if(counter == 1){ //Upper
            image(playerAnimation[3], round(this.x) + 10, round(this.y) -20, 0, 0);
        }
        if(counter == 2){ //LeftSide
            image(playerAnimation[9], round(this.x) + 10, round(this.y) - 20, 0, 0);
        }
        if(counter == 3){ //Front
            image(playerAnimation[0], round(this.x) + 10, round(this.y) -20, 0, 0);
        }
    }


    //Move the character forward
    void moveForward(){
        //int center = onCircle(this.center, tileSize, this.facing);



        /*/TESTING
        if(this.playerCounter === 0){ //Right side
            console.log("Right");
     
            image(playerAnimation[7], round(this.x) + 20, round(this.y) - 20, 0, 0);
            image(playerAnimation[8], round(this.x) + 20, round(this.y) - 20, 0, 0);
        
            //image(playerAnimation[6], round(this.x) + 20, round(this.y) - 20, 0, 0);
        }
        if(this.playerCounter === 1){ //Upper
            console.log("Upper");
            image(playerAnimation[3], round(this.x) + 10, round(this.y) -20, 0, 0);
        }
        if(this.playerCounter === 2){ //LeftSide (Testing)
            console.log("Left");
            image(playerAnimation[9], round(this.x) + 10, round(this.y) - 20, 0, 0);
        }
        if(this.playerCounter === 3){ //Front
            console.log("Front");
            image(playerAnimation[0], round(this.x) + 10, round(this.y) -20, 0, 0);
        }
        //*/


        PVector test = onCircle(this.center, tileSize, this.facing);
        this.updatePosition(test.x-tileSize/2, test.y-tileSize/2, this.facing);
        //image(playerAnimation[0], round(this.x) + 5, round(this.y) + 5, 50, 50);
    }

    //Turn the character
    void turn(int deg){
        // this.facing = this.facing+deg;
        this.updatePosition(this.x, this.y, this.facing+deg); //this.facing+deg
    }

    //All the movement is updating its position
    void updatePosition(float x, float y, int deg){
        //console.log(round(x));
        //console.log(round(y));
        moveWidth = round(x);
        moveHeight = round(y);
        if (round(x) == -tileSize){
            this.prevX = this.x;
            this.prevY = this.y;

            this.x = 0;
            this.y = y;
            //this.center = {x: this.x+tileSize/2, y:this.y+tileSize/2}; --COMEBACK
            this.facing = deg;
        }else if (round(x) == 600){
            this.prevX = this.x;
            this.prevY = this.y;

            this.x = 540;
            this.y = y;
            //this.center = {x: this.x+tileSize/2, y:this.y+tileSize/2}; --COMEBACK
            this.facing = deg;
        }else if (round(y) == -60){
            this.prevX = this.x;
            this.prevY = this.y;

            this.x = x;
            this.y = 0;
            //this.center = {x: this.x+tileSize/2, y:this.y+tileSize/2}; --COMEBACK
            this.facing = deg;
        }else if (round(y) == 540){
            this.prevX = this.x;
            this.prevY = this.y;

            this.x = x;
            this.y = 480;
            //this.center = {x: this.x+tileSize/2, y:this.y+tileSize/2}; --COMEBACK
            this.facing = deg;
        }else{
            this.prevX = this.x;
            this.prevY = this.y;

            this.x = x;
            this.y = y;
            //this.center = {x: this.x+tileSize/2, y:this.y+tileSize/2}; --COMEBACK
            this.facing = deg;
        }

        //Collect coins
        for (int i = 0; i < coins.length; i++){
            if (coins[i].rpos - 30 == round(this.x) && coins[i].rpos2 - 30 == round(this.y)){
                //Coins gone
                coins[i].rpos = 1;
                coins[i].rpos2 = 1;
                points++;
            }
        }

        //Detect blocks
        for (int i = 0; i < blocks.length; i++){
            if (blocks[i].rpos - 30 == round(this.x) && blocks[i].rpos2 - 30 == round(this.y)){
                this.x = this.prevX;
                this.y = this.prevY;
                //this.center = {x: this.x+tileSize/2, y:this.y+tileSize/2}; --COMEBACK
                this.facing = deg;
            }
        }

    }

}
//-----------------------------------------------------------------------------------------------------------------




//-------------------------------------------------------ENEMY CLASS-----------------------------------------------
class Enemy{
    int posX;
    int pos2X;
    int posY;
    int pos2Y;
    int enemyMovingX;
    int enemyMovingY;
    boolean flip;
    Enemy(int enemyblockX, int enemyblockY){
        this.posX = enemyblockX;
        this.pos2X = enemyblockY;

        this.posY = enemyblockX;
        this.pos2Y = enemyblockY;


        this.flip = flipBooleanX; //Flip the sprite when walking back
    }

    void displayX(){
        
        if (this.enemyMovingX <= enemyMoveMaxX){
            this.posX += enemyMovingX;
        }
        if (this.flip == true){
            image(guard[13], round(this.posX) - 20, round(this.pos2X) - 57, 0, 0);
        }else{
            image(guard[14], round(this.posX) - 20, round(this.pos2X) - 57, 0, 0);
        }
        //rect(this.posX - 20, this.pos2X - 20, width / 15, height / 15);
        

        //Detect enemy
        for (int i = 0; i < enemy.length; i++){
            if(this.posX - 30 == moveWidth && this.pos2X - 30 == moveHeight){
                level = 5;
            }
        }
    }


    void displayY(){
        fill(255);
        if (this.enemyMovingY <= enemyMoveMaxY){
            this.pos2Y += enemyMovingY;
        }

        if (this.flip == true){
            image(guard[15], round(this.posY) - 24, round(this.pos2Y) - 57, 0, 0);
        }else{
            image(guard[12], round(this.posY) - 24, round(this.pos2Y) - 57, 0, 0);
        }
        //rect(this.posX - 20, this.pos2X - 20, width / 15, height / 15);
        

        //Detect enemy
        for (int i = 0; i < enemy2.length; i++){
            if(this.posY - 30 == moveWidth && this.pos2Y - 30 == moveHeight){
                level = 5;
            }
        }
    }
}
//-----------------------------------------------------------------------------------------------------------------



//----------------------------------------------------COINS CLASS--------------------------------------------------
class Coins{
    int rpos;
    int rpos2;
    float random;
    Coins(int randomCoinX, int randomCoinY, float i){
        this.rpos = randomCoinX;
        this.rpos2 = randomCoinY;
        this.random = i;
    }

    void display(){
        push();
        //fill("gold");
        image(diamonds[round(this.random)], this.rpos - 22, this.rpos2 - 20, 45, 43);
        //ellipse(this.rpos, this.rpos2, width / 20, height / 16); //Outer circle
        //ellipse(this.rpos, this.rpos2, width / 40, height / 25); //Inner circle
        pop();
    }
}
//-----------------------------------------------------------------------------------------------------------------



//-----------------------------------------------------BLOCK CLASS-------------------------------------------------
class Block{
    int rpos;
    int rpos2;
    Block(int randomBlockX, int randomBlockY){
        this.rpos = randomBlockX;
        this.rpos2 = randomBlockY;
    }

    void display(){
        push();
        fill(0);
        rect(this.rpos - 20, this.rpos2 - 20, width / 15, height / 15); //Outer circle
        pop();
    }
}
//-----------------------------------------------------------------------------------------------------------------



//---------------------------------------------------FINISHING BLOCK CLASS-----------------------------------------
class FinishBlock{
    int rpos;
    int rpos2;
    FinishBlock(int randomBlockX, int randomBlockY){
        this.rpos = randomBlockX;
        this.rpos2 = randomBlockY;
    }


    void finishDisplay(){
        push();
        fill(20, 75, 200);
        rect(this.rpos + 10, this.rpos2 + 10, width / 15, height / 15); //Outer circle
        pop();
    }
}
//-----------------------------------------------------------------------------------------------------------------



//----------------------------------------------------MUSIC BEAT CLASS---------------------------------------------
class Cube{ //The red cube
    void displayDetector(){
        fill(0);
        rect(0, 540, 600 ,60); //Whole bar
        fill(pressByBeat);
        rect(480, 540, 60 , 60); //Beat detector?
        // now see if distance between two is less than sum of two radius"
       

        //Are you in sync? (COMMENT OUT FOR NOW)
        
        if ((x2 > 540 || x2 < 480) && pressByBeat == 0){ //If you miss the beat
            backgroundColor-= 50;
        }else if (backgroundColor <= 60){
            level = 5;
        }

        //If condition for now. Enemy collision




        if (pressByBeat == 0){
            pressByBeat = 500;
        }


        //-----Enemy moving in the X-------
        if (x2 < 530 && x2 > 520 && enemyMovingX <= enemyMoveMaxX && enemyMoveMaxLockX == false){
            enemyMovingX+=60;
            flipBooleanX = false;
        }
        //Moving back for the X
        if (x2 < 530 && x2 > 520 && enemyMoveMaxLockX == true){
            enemyMovingX -=60;
            flipBooleanX = true;
            if (enemyMovingX == 0){
                enemyMoveMaxLockX = false;
            }
        }
        //Locks for the X
        if (enemyMovingX == enemyMoveMaxX){ 
            enemyMoveMaxLockX = true;
        }
        //-------------




        //-----Enemy moving in the Y-------
        if (x2 < 530 && x2 > 520 && enemyMovingY <= enemyMoveMaxY && enemyMoveMaxLockY == false){
            enemyMovingY+=60;
        }
        //Moving back for the Y
        if (x2 < 530 && x2 > 520 && enemyMoveMaxLockY == true){
            enemyMovingY -=60;
            flipBooleanY = true;
            if (enemyMovingY == 0){
                enemyMoveMaxLockY = false;
            }
        }
        //Locks for the Y
        if (enemyMovingY == enemyMoveMaxY){ 
            enemyMoveMaxLockY = true;
        }
        //-------------


    }


    void displayMainMenu(){ //Shows a Cop and a Thief Running
        noStroke();
        //rect(xMainMenu, yMainMenu, rectWidthMainMenu, rectHeightMainMenu);
        image(playerAnimation[6], xMainMenu, yMainMenu - 50, 0, 0);
        textSize(20);
        fill(0,0,0,255); //white
        text("Now playing: Super Mario Galaxy 2 8-bit (By Vahkiti)", xMainMenu + 50, 575);
        //rect(xMainMenu, yMainMenu, rectWidthMainMenu, rectHeightMainMenu);
        image(guard[14], xMainMenu - 100, yMainMenu - 50, 0, 0);
        if(xMainMenu > width + 100) {
            xMainMenu = -rectWidthMainMenu - 1000;
        }
        xMainMenu+=2; //Change when needed
    }




    void displayLevel1(){ //Music:
        noStroke();
        fill(255,0,0,255); //red
        rect(x2, y2, rectWidth, rectHeight);
        rect(x2, y2, rectWidth, rectHeight);
        if(x2 > width) {
            x2 = -rectWidth;
        }
        x2+=7.9; //Change when needed
    }

    void displayLevel2(){ //Music:
        noStroke();
        fill(255,0,0,255); //red
        rect(x2, y2, rectWidth, rectHeight);
        rect(x2, y2, rectWidth, rectHeight);
        if(x2 > width) {
            x2 = -rectWidth;
        }
        x2+=8.9; //Change when needed
    }

    void displayLevel3(){ //Music:
        noStroke();
        fill(255,0,0,255); //red
        rect(x2, y2, rectWidth, rectHeight);
        rect(x2, y2, rectWidth, rectHeight);
        if(x2 > width) {
            x2 = -rectWidth;
        }
        x2+=9.9; //Change when needed
    }

    void displayLevel4(){ //Music: Super Mario Galaxy 2 
        noStroke();
        fill(255,0,0,255); //red
        rect(x2, y2, rectWidth, rectHeight);
        rect(x2, y2, rectWidth, rectHeight);
        if(x2 > width) {
            x2 = -rectWidth;
        }
        x2+=11.9; //Change when needed
    }
}
//-----------------------------------------------------------------------------------------------------------------